contract HashedtimeLock =

  record lock_contract = 
    {  amount: int
    ,  hash_lock: int
    ,  time_lock: int
    ,  sender: address
    ,  receiver: address
    ,  withdrawn: bool
    ,  refunded: bool
    ,  preimage: string } 
  
  record state = 
    { 
      contracts: map(int, lock_contract) 
    }
      
  public stateful function init() = { contracts = {} }
  
  public stateful function new_contract(receiver : address, hash_lock : int, time_lock : int) : int =
    check_funds(Call.value)
    check_timelock(time_lock)
    let str : string = getStr(receiver, hash_lock, time_lock)
    let contract_id : int = String.sha3(str)
    require(!Map.member(contract_id, state.contracts), "CONTRACT_ALREADY_EXISTS")
    let lock_contract : lock_contract = 
      {  sender = Call.caller
       , receiver = receiver
       , amount = Call.value
       , hash_lock = hash_lock
       , time_lock = time_lock
       , withdrawn = false
       , refunded = false
       , preimage = "" }
    put(state{contracts[contract_id] = lock_contract })
    contract_id
  
  public stateful function withdraw(contract_id : int, preimage : string) : bool =
    let temp_contract : lock_contract = state.contracts[contract_id]
    check_contract(temp_contract.sender)
    check_hash_for_match(temp_contract.hash_lock, preimage)
    check_for_withdraw(
      temp_contract.receiver,
      temp_contract.withdrawn,
      temp_contract.time_lock)
    let updated_contract = temp_contract{preimage = preimage, withdrawn = true}
    put(state{contracts[contract_id] = updated_contract})
    Chain.spend(temp_contract.receiver, temp_contract.amount)
    true
    
  public function refund(contract_id : int) : bool =
    let temp_contract : lock_contract = state.contracts[contract_id]    
    check_contract(temp_contract.sender)
    check_for_refund(
         temp_contract.sender, 
         temp_contract.refunded, 
         temp_contract.withdrawn, 
         temp_contract.time_lock) 
    put(state{contracts[contract_id].refunded = true})
    Chain.spend(temp_contract.sender, temp_contract.amount)
    true
    
  public function get_contract(contract_id : int) : lock_contract =
    Map.lookup_default(contract_id, state.contracts, 
      {  sender = #0
       , receiver = #0
       , amount = 0
       , hash_lock = 0
       , time_lock = 0
       , withdrawn = false
       , refunded = false
       , preimage = "" })
  
  private function check_funds(value : int) =
    require(value > 0 ,"INVALID_AMOUNT")
    
  private function check_timelock(time : int) =
    require(time > Chain.timestamp, "INVALID_TIME_LOCK")
    
  private function check_contract(sender : address) =
  	require(sender != #0, "CONTRACT_NOT_EXISTS")
      
  private function check_hash_for_match(hash_lock: int, secret : string) =
    require(hash_lock == String.sha3(secret) , "HASH_LOCK_NOT_MATCH")
  
  private function check_for_withdraw(receiver : address, withdrawn : bool, time_lock : int) =
    check_timelock(time_lock)
    require(receiver  == Call.caller, "INVALID_RECEIVER")
    require(withdrawn == false, "ALREADY_WITHDRAWN" )
  
  private function check_for_refund(sender : address, refunded : bool, withdrawn : bool, time_lock : int) =
  	require(sender    == Call.caller, "INVALID_SENDER")
  	require(refunded  == false, "ALREADY_REFUNDED")
  	require(withdrawn == false, "ALREADY_WITHDRAWN")
  	require(time_lock =< Chain.timestamp, "INVALID_TIME_LOCK")
    
  private function require(b : bool, err : string) =
    if(!b)
      abort(err)
   
  private function getStr(a : address, h : int, t : int) : string =
    String.concat(String.concat(Address.to_str(a), Int.to_str(h)), Int.to_str(t))
 