contract HashedtimeLock =

  record lockContract = 
    { 
      amount: int, 
      hashLock: int, 
      timeLock: int, 
      sender: address, 
      receiver: address, 
      withdrawn: bool,
      refunded: bool, 
      preimage: string 
    } 
  
  record state = 
    { 
      contracts: map(int, lockContract) 
    }
      
  public stateful function init() = { contracts = {} }
  
  public stateful function newContract(receiver : address, hashLock : int, timeLock : int) : int =
    hasEnoughFunds()
    isCorrectTimeLock(timeLock)
    let str : string = getStr(receiver, hashLock, timeLock)
    let contractId : int = String.sha3(str)
    require(!Map.member(contractId, state.contracts), "CONTRACT_ALREADY_EXISTS")
    let lockContract : lockContract = {sender = Call.caller, receiver = receiver, amount = Call.value, hashLock = hashLock, timeLock = timeLock, withdrawn = false, refunded = false, preimage = ""}
    put(state{contracts[contractId] = lockContract })
    contractId
    
  public stateful function withdraw(contractId : int, preimage : string) : bool =
  	contractExists(contractId)
  	isHashLockMatched(contractId, preimage)
  	isWithdrawable(contractId)
  	put(state{contracts[contractId].preimage = preimage})
  	put(state{contracts[contractId].withdrawn = true})
  	Chain.spend(state.contracts[contractId].receiver, state.contracts[contractId].amount)
  	true
    
  public function refund(contractId : int) : bool =
  	contractExists(contractId)
  	isRefundable(contractId)
  	put(state{contracts[contractId].refunded = true})
  	Chain.spend(state.contracts[contractId].sender, state.contracts[contractId].amount)
  	true
    
  public function getContract(contractId : int) : lockContract =
  	Map.lookup_default(contractId, state.contracts, {sender = #0, receiver = #0, amount = 0, hashLock = 0, timeLock = 0, withdrawn = false, refunded = false, preimage = ""})
  
  private function hasEnoughFunds() =
    require(Call.value > 0 ,"INVALID_AMOUNT")
    
  private function isCorrectTimeLock(time : int) =
  	require(time > Chain.timestamp, "INVALID_TIME_LOCK")
    
  private function contractExists(contractId : int) =
  	require(haveContract(contractId), "CONTRACT_NOT_EXISTS")
      
  private function isHashLockMatched(contractId: int, secret : string) =
	require(state.contracts[contractId].hashLock == String.sha3(secret) , "HASH_LOCK_NOT_MATCH")
  
  private function isWithdrawable(contractId : int) =
  	require(state.contracts[contractId].receiver == Call.caller, "INVALID_RECEIVER")
	require(state.contracts[contractId].withdrawn == false, "ALREADY_WITHDRAWN" )
  	require(state.contracts[contractId].timeLock > Chain.timestamp, "INVALID_TIME_LOCK")
  
  private function isRefundable(contractId : int) =
  	require(state.contracts[contractId].sender == Call.caller, "INVALID_SENDER")
  	require(state.contracts[contractId].refunded == false, "ALREADY_REFUNDED")
  	require(state.contracts[contractId].withdrawn == false, "ALREADY_WITHDRAWN")
  	require(state.contracts[contractId].timeLock =< Chain.timestamp, "INVALID_TIME_LOCK")
    
  private function haveContract(contractId : int) : bool =
  	let exists : bool = state.contracts[contractId].sender != #0
  	exists
  
  private function require(b : bool, err : string) =
    if(!b)
      abort(err)
   
  private function getStr(a : address, h : int, t : int) : string =
    str_concat(str_concat(a2s(a), i2s(h)), i2s(t))
  
  private function a2s(a : address) : string = Address.to_str(a)
 
  private function i2s(i : int) : string = Int.to_str(i)
   
  private function str_concat(s1, s2) : string = String.concat(s1, s2)
 